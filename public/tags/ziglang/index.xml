<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ziglang on pop-ecx</title><link>https://pop-ecx.github.io/tags/ziglang/</link><description>Recent content in ziglang on pop-ecx</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 09 Sep 2025 12:56:16 +0300</lastBuildDate><atom:link href="https://pop-ecx.github.io/tags/ziglang/index.xml" rel="self" type="application/rss+xml"/><item><title>Pack to the Future:obfuscating My C2 Agent</title><link>https://pop-ecx.github.io/pack-to-the-futureobfuscating-my-c2-agent/</link><pubDate>Tue, 09 Sep 2025 12:56:16 +0300</pubDate><guid>https://pop-ecx.github.io/pack-to-the-futureobfuscating-my-c2-agent/</guid><description>This is a follow up on my previous article.
It is generally about my journey in searching for a relatively unknown and easy to understand packer to obfuscate my custom zig C2 agent. If you are generally looking for a tutorial on how to pack binaries, this is not it. I will not go into the details of how packers work, but rather share what led me to the final solution.</description></item><item><title>Writing a Yara Parser</title><link>https://pop-ecx.github.io/writing-a-yara-parser/</link><pubDate>Wed, 18 Jun 2025 12:56:07 +0300</pubDate><guid>https://pop-ecx.github.io/writing-a-yara-parser/</guid><description>It&amp;rsquo;s been a while since I wrote yara rules. In fact, the last time I did, I was still using vscode. I needed now to write one. So I chose to look at one of my local yara rules repo. Opened it in nvim and &amp;hellip; no syntax highlighting.
Easy fix though. Treesitter is what provides highlighting for my setup, so I did :TSInstall yara. Damn!! No yara parser. That meant I had to write a custom one.</description></item></channel></rss>