<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pop-ecx</title><link>https://pop-ecx.github.io/</link><description>Recent content on pop-ecx</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 21 Oct 2025 09:28:15 +0300</lastBuildDate><atom:link href="https://pop-ecx.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Zig as a Drop in C Replacement</title><link>https://pop-ecx.github.io/zig-as-a-drop-in-c-replacement/</link><pubDate>Tue, 21 Oct 2025 09:28:15 +0300</pubDate><guid>https://pop-ecx.github.io/zig-as-a-drop-in-c-replacement/</guid><description>A while back I wrote a small neofetch-like program in Zig as a way to learn the language. I always knew Zig could interoperate with C, as I had earlier written a yara rules parser using treesitter and Zig.
Now I wanted to test my neofetch-like program in various environments, and one of those was st. St is a simple terminal emulator, part of the suckless tools. It is written in C, minimalistic and I generally liked using it.</description></item><item><title>Pack to the Future:obfuscating My C2 Agent</title><link>https://pop-ecx.github.io/pack-to-the-futureobfuscating-my-c2-agent/</link><pubDate>Tue, 09 Sep 2025 12:56:16 +0300</pubDate><guid>https://pop-ecx.github.io/pack-to-the-futureobfuscating-my-c2-agent/</guid><description>This is a follow up on my previous article.
It is generally about my journey in searching for a relatively unknown and easy to understand packer to obfuscate my custom zig C2 agent. If you are generally looking for a tutorial on how to pack binaries, this is not it. I will not go into the details of how packers work, but rather share what led me to the final solution.</description></item><item><title>Reflections on Writing a Mythic C2 Agent in Zig</title><link>https://pop-ecx.github.io/reflections-on-writing-a-mythic-c2-agent-in-zig/</link><pubDate>Mon, 14 Jul 2025 09:38:04 +0300</pubDate><guid>https://pop-ecx.github.io/reflections-on-writing-a-mythic-c2-agent-in-zig/</guid><description>Over the past couple of months, I&amp;rsquo;ve been writing a mythic C2 implant in zig. &amp;ldquo;Why?&amp;rdquo;, you ask. Well, it&amp;rsquo;s all part of my learning process. I also wanted to understand how C2 frameworks work and how zig can be used for offensive tooling.
There are lots of C2 frameworks out there and each has its own quirks and uniqueness. I happened to settle on Mythic. Mythic supports agents written in any language.</description></item><item><title>Writing a Yara Parser</title><link>https://pop-ecx.github.io/writing-a-yara-parser/</link><pubDate>Wed, 18 Jun 2025 12:56:07 +0300</pubDate><guid>https://pop-ecx.github.io/writing-a-yara-parser/</guid><description>It&amp;rsquo;s been a while since I wrote yara rules. In fact, the last time I did, I was still using vscode. I needed now to write one. So I chose to look at one of my local yara rules repo. Opened it in nvim and &amp;hellip; no syntax highlighting.
Easy fix though. Treesitter is what provides highlighting for my setup, so I did :TSInstall yara. Damn!! No yara parser. That meant I had to write a custom one.</description></item><item><title>Chaos Cryptography</title><link>https://pop-ecx.github.io/chaos-cryptography/</link><pubDate>Tue, 27 May 2025 13:13:29 +0300</pubDate><guid>https://pop-ecx.github.io/chaos-cryptography/</guid><description>&lt;p>&lt;img src="hero.jpg" alt="hero">&lt;/p>
&lt;blockquote>
&lt;p>This article was originally published on section.io, May 2022&lt;/p>
&lt;/blockquote>
&lt;p>Chaos theory is a branch of mathematics that deals with studying non-linear dynamical systems that exhibit sensitivity to initial conditions. Chaotic conditions exist in nature. A decent and typical example of such is the weather.&lt;/p></description></item><item><title>Quantum Key Distribution</title><link>https://pop-ecx.github.io/quantum-key-distribution/</link><pubDate>Fri, 23 May 2025 22:23:09 +0300</pubDate><guid>https://pop-ecx.github.io/quantum-key-distribution/</guid><description>&lt;p>&lt;img src="hero.jpg" alt="hero">&lt;/p>
&lt;blockquote>
&lt;p>This article was originally published on section.io, February 2022&lt;/p>
&lt;/blockquote>
&lt;p>Quantum key distribution (QKD) is an advanced sub-disciplines of quantum information technology. It aims at coming up with novel and sophisticated methods of securely exchanging cryptographic keys by use of basic quantum mechanical concepts such as entanglement and measurement.&lt;/p></description></item><item><title>Clearfake 2: We now have Lumma</title><link>https://pop-ecx.github.io/clearfake-2/</link><pubDate>Wed, 09 Apr 2025 12:11:34 +0300</pubDate><guid>https://pop-ecx.github.io/clearfake-2/</guid><description>I had previously written about my cutting up of clearfake which you can find here.
Quick recap:
We deobfuscated the powershell obtained from a fake browser update prompt. The code executed base64 encoded command with window style hidden option. The command downloaded a data.zip file. Now, the zip file is extracted, an exe is sought inside the contents and executed. Here is the code responsible for that: The zip file contains 4 files:</description></item><item><title>Security Slips: The Day I Ran Unknown Code</title><link>https://pop-ecx.github.io/security-slips/</link><pubDate>Fri, 28 Mar 2025 13:17:54 +0300</pubDate><guid>https://pop-ecx.github.io/security-slips/</guid><description>On March 25th 2025, Troy Hunt, haveibeenpwned&amp;rsquo;s author, published in his blog about how a sneaky phishing lure got hold of his mailing list. This interesting read made me reminisce about how, not so long ago, I almost fell for a similar thing, albeit mine was not so sophisticated.
January 2nd 2025, 12 p.m EAT, I had just gotten home from a lengthy holiday. Being super tired I booted up my Latitude to check on a few things.</description></item><item><title>Secure Development in Neovim using Snyk</title><link>https://pop-ecx.github.io/secure-development/</link><pubDate>Wed, 19 Mar 2025 09:39:27 +0300</pubDate><guid>https://pop-ecx.github.io/secure-development/</guid><description>In my previous post I talked about how you can use snyk in your editor as you code and even added snyk-ls as a must have. I had a bit of a tough time finding the correct configuration to achieve this using Neovim. Perhaps you are, right now, on the same path as myself last year. Luckily for you, I gotchu.
Before proceeding, make sure you have a snyk account and activate snyk code.</description></item><item><title>Nvim Dev</title><link>https://pop-ecx.github.io/nvim-dev/</link><pubDate>Mon, 17 Mar 2025 11:27:33 +0300</pubDate><guid>https://pop-ecx.github.io/nvim-dev/</guid><description>Here is a quick list of my Neovim setup for dev work. This includes plugins, LSPs and some handy keymaps.
Plugins Telescope - Fuzzy find files quickly. No need for filetree with this one. Harpoon - Mark frequently visited files and get to them blazingly fast. Mason - This helps in installing language servers. Make sure you have mason-lspconfig.nvim and nvim-lspconfig. nvim-cmp - For completions. Make sure to also get Luasnip, cmp_luasnip, friendly-snippets and nvim-cmp-lsp.</description></item><item><title>Clearfake Malware Analysis</title><link>https://pop-ecx.github.io/clearfake/</link><pubDate>Mon, 03 Mar 2025 11:10:51 +0300</pubDate><guid>https://pop-ecx.github.io/clearfake/</guid><description>A while ago (around 7 months ago), I had obtained, through a friend, a sample of clearfake malware that was wrecking havoc in one of his friend&amp;rsquo;s servers.
This post is about analysis I had done. I have been procrastinating a lot on writing it, so here it goes&amp;hellip;
Below is a screenshot of the infection method it uses, a notification to update your browser by running some powershell.
I clicked copy and pasted it in Neovim.</description></item><item><title>Purplefox Analysis</title><link>https://pop-ecx.github.io/purplefox-analysis/</link><pubDate>Tue, 25 Feb 2025 11:03:11 +0300</pubDate><guid>https://pop-ecx.github.io/purplefox-analysis/</guid><description>Originally written Thu, Jun 15, 2023
A couple of months ago, I came across an intriguing .tmp file that was sent to me. The sender mentioned that their antivirus software had flagged and caught the file on their computer. Naturally, I decided to investigate further. Although the file was labeled as a .tmp file, running it through a file utility revealed that it was actually an MSI (Microsoft Software Installer) file.</description></item><item><title>Posts</title><link>https://pop-ecx.github.io/posts/</link><pubDate>Mon, 24 Feb 2025 13:15:42 +0300</pubDate><guid>https://pop-ecx.github.io/posts/</guid><description> Purplefox msi rootkit analysis Nvim for devs Secure development in nvim using snyk Clearfake analysis pt 1 Security slips: The day i ran unknown code clearfake 2: We now have lumma Quantum Key Distribution Chaos Cryptography Writing a yara parser Reflections on writing a mythic C2 agent in zig Pack to the Future: Obfuscating My C2 Agent</description></item></channel></rss>