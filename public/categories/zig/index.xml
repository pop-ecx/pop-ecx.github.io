<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>zig on pop-ecx</title><link>https://pop-ecx.github.io/categories/zig/</link><description>Recent content in zig on pop-ecx</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 21 Oct 2025 09:28:15 +0300</lastBuildDate><atom:link href="https://pop-ecx.github.io/categories/zig/index.xml" rel="self" type="application/rss+xml"/><item><title>Zig as a Drop in C Replacement</title><link>https://pop-ecx.github.io/zig-as-a-drop-in-c-replacement/</link><pubDate>Tue, 21 Oct 2025 09:28:15 +0300</pubDate><guid>https://pop-ecx.github.io/zig-as-a-drop-in-c-replacement/</guid><description>A while back I wrote a small neofetch-like program in Zig as a way to learn the language. I always knew Zig could interoperate with C, as I had earlier written a yara rules parser using treesitter and Zig.
Now I wanted to test my neofetch-like program in various environments, and one of those was st. St is a simple terminal emulator, part of the suckless tools. It is written in C, minimalistic and I generally liked using it.</description></item><item><title>Reflections on Writing a Mythic C2 Agent in Zig</title><link>https://pop-ecx.github.io/reflections-on-writing-a-mythic-c2-agent-in-zig/</link><pubDate>Mon, 14 Jul 2025 09:38:04 +0300</pubDate><guid>https://pop-ecx.github.io/reflections-on-writing-a-mythic-c2-agent-in-zig/</guid><description>Over the past couple of months, I&amp;rsquo;ve been writing a mythic C2 implant in zig. &amp;ldquo;Why?&amp;rdquo;, you ask. Well, it&amp;rsquo;s all part of my learning process. I also wanted to understand how C2 frameworks work and how zig can be used for offensive tooling.
There are lots of C2 frameworks out there and each has its own quirks and uniqueness. I happened to settle on Mythic. Mythic supports agents written in any language.</description></item></channel></rss>